__/\\\________/\\\_____/\\\\\\\\\\\____/\\\___________________/\\\\\__________/\\\\\\\\\\\___        
 _\/\\\_____/\\\//____/\\\/////////\\\_\/\\\_________________/\\\///\\\______/\\\/////////\\\_       
  _\/\\\__/\\\//______\//\\\______\///__\/\\\_______________/\\\/__\///\\\___\//\\\______\///__      
   _\/\\\\\\//\\\_______\////\\\_________\/\\\______________/\\\______\//\\\___\////\\\_________     
    _\/\\\//_\//\\\_________\////\\\______\/\\\_____________\/\\\_______\/\\\______\////\\\______    
     _\/\\\____\//\\\___________\////\\\___\/\\\_____________\//\\\______/\\\__________\////\\\___   
      _\/\\\_____\//\\\___/\\\______\//\\\__\/\\\______________\///\\\__/\\\_____/\\\______\//\\\__  
       _\/\\\______\//\\\_\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\\\____\///\\\\\/_____\///\\\\\\\\\\\/___ 
        _\///________\///____\///////////_____\///////////////_______\/////_________\///////////_____

CATATAN PELATIHAN KSLOS 09/05/2016, LN10v1a.txt
Latihan 10 : Pengenalan BE & RE 4
              Menggunakan ollydbg atau idapro

--------| Pendahuluan

Reversing pada windows dilakukan dengan executable file yang berbeda.
Jika di Linux kita memakai ELF, maka di windows dikenal dengan P32, 
dengan eksensi file .exe . Secara garis besar kedua cara debugging
untuk P32 dengan ELF 32-bit sama saja, hanya berbeda di bagian system
call saja(karena kernel yang berbeda).

--------| Ollydebug

Adalah Ring3 debugger, artinya ia bekerja di level windows application. Installah Ollydebug v.2.00, dan gunakan ollydbg.ini yang tersedia di SN.

Interface : main window adalah cpu window. VA(virtual addresses) ada di paling kiri (contoh: 00401040). Kemudian di kanan VA ada opcodes yaitu instruksi yang dimengerti komputer dalam bytes. Kemudian di kanannya ada instruksi yang dimnegeri manusia, adalah terjemahan dari opcode. Lalu dikanannya lagi ada comment, yaitu hasil analisa olly terhadap opcode.

1 dword = 4 bytes

File win32.hlp akan dibagikan saat latihan

Untuk memahami lebih dalam tentang PE carilah Portable Executable File Format Compendium

Register window :
eax : Extended Accumulator Register
ebx : Extended Base Register
ecx : Extended Counter Register
edx : Extended Data REgister
esi : Extended Source Index
edi : Extended Destination Index
ebp : Extended Base Pointer
esp : Extended Stack Pointer
eip : Extended Instruction Pointer

size dari register adalah 4 bytes

walaupun 32 bits, namun ada bagian 16 bit dan 8 bit yang tidak bisa dialamatkan secara langsung.
yaitu : 
16bit:
AX, BX, CX, DX, SI, DI, BP, SP, IP
8bit:
AH/AL, BH/BL, CH/CL, DH/DL

Contohnya : EDX == 7C90EB94
DX == EB94
DH == EB
DL == 94

Stack Window : berisi stack frame yang bisa dianalogikan seperti tumpukan piring

Dump window : adalah hasil hex dump dari program yang dibuka

--------| ReverseMe

Di direktori SN sudah tersedia reverseme.exe yang akan kita gunakan untuk latihan kali ini. Aplikasi Windows run pada Ring3 (high level), tapi mereka harus "bekerja" di Ring0 juga (kernel). Bagaimana cara melakukan hal tsb, Windows memiliki fungsi yang bisa digunakan untuk merequest operasi low level yang dinamakan dengan Windows API (Application Programming Interface).

Simpelnya : aplikasi menggunakan API untuk membuat komputer melakukan sesuatu

Tugas : 

  +perhatikan command push dan hasilnya pada stack window

  +perhatikan fungsi mov

  +reverseme mencari file keyfile.dat, examine API CreateFileA dengan win32.hlp(ctrl+F1)

  +cmp akan menset C/O/Z flag

  +jnz akan jump sesuai Z-flag, arrow akan menjadi merah jika jump

  +mengganti flag(klik kiri di flag), agar memaksa jump

  +melakukan breakpoint

  +XOR akan menjadikan O&C Flag menjadi 0(clear), dan menset Z-Flag.

  +Carilah pesan sukses dengan klik kanan>search for> all referenced text strings

  +Melakukan patching, ganti jnz pertama menjadi jmp, lakukan nop sled pada jl. Jika sudah selesai, block semua yang sudah diubah di CPU window, lalu klikkanan->copytoexecutable->selection->klik kanan-> save file


--------|Links&Referensi
Lena Reversing for Beginners*


*: rekomendasi untuk dibaca
